// Generated by CoffeeScript 2.5.1
var Board, Button, EMPTY, SIZE, Square, board, buttons, click, coords, data, filename, getMove, index, moves, pics, piecess, setIndex, showSan, xdraw,
  indexOf = [].indexOf;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  log,
  range
} from '../js/utils.js';

//filename = 'lichess_pgn_2023.03.30_ChristerNilsson_vs_assman69420.HaBJHriw.json'
//filename = 'JanChristerNilsson_vs_dn1023_2023.03.29.json'
//filename = "lichess_pgn_2023.03.31_Onur1907-06_vs_ChristerNilsson.BFUYknEp.json"
//filename = "lichess_pgn_2023.03.31_ChristerNilsson_vs_arapop.kElIgV5u.json"
filename = "lichess_pgn_2023.04.01_MohamedFadel123_vs_ChristerNilsson-D15.MyJVoc2Y.json";

filename = "lichess_pgn_2023.04.01_king1971_vs_ChristerNilsson.7aPwVw9A.json";

data = null;

index = -1;

SIZE = 100;

EMPTY = '.';

pics = {};

piecess = [];

buttons = [];

board = null;

moves = [];

Board = class Board {
  constructor() {
    var i, j, len, ref;
    this.start = this.start.bind(this);
    this.draw = this.draw.bind(this);
    this.littera = this.littera.bind(this);
    this.flip = this.flip.bind(this);
    this.move = this.move.bind(this);
    this.squares = [];
    this.pieces = "";
    this.flipped = false;
    ref = range(64);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      this.squares.push(new Square(i));
    }
    this.start();
    buttons.push(new Button(1.0 * SIZE, 9.5 * SIZE, 'first', () => {
      return click('first');
    }));
    buttons.push(new Button(2.7 * SIZE, 9.5 * SIZE, 'prev', () => {
      return click('prev');
    }));
    // buttons.push new Button 4.4*SIZE, 9.5*SIZE, 'up', () => click 'up'
    // buttons.push new Button 4.4*SIZE, 10.5*SIZE, 'down', () => click 'down'
    buttons.push(new Button(4.4 * SIZE, 9.5 * SIZE, 'next', () => {
      return click('next');
    }));
    buttons.push(new Button(6.1 * SIZE, 9.5 * SIZE, 'last', () => {
      return click('last');
    }));
    buttons.push(new Button(1.0 * SIZE, 10.5 * SIZE, 'flip', () => {
      return click('flip');
    }));
    buttons.push(new Button(2.7 * SIZE, 10.5 * SIZE, 'link', () => {
      return click('link');
    }));
  }

  start() {
    this.pieces = "";
    this.pieces += "RNBQKBNR";
    this.pieces += "PPPPPPPP";
    this.pieces += "........";
    this.pieces += "........";
    this.pieces += "........";
    this.pieces += "........";
    this.pieces += "pppppppp";
    return this.pieces += "rnbqkbnr";
  }

  draw() {
    var i, j, len, ref;
    fill('white');
    textSize(SIZE * 0.3);
    push();
    textAlign(LEFT, CENTER);
    text(filename, 0.05 * SIZE, 0.3 * SIZE);
    pop();
    ref = range(64);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      this.squares[i].draw(this.pieces[i], this.flipped);
    }
    stroke('black');
    noFill();
    rect(SIZE * 4.5, SIZE * 4.5, SIZE * 8, SIZE * 8);
    return this.littera();
  }

  littera() {
    var i, j, len, ref, results;
    fill('black');
    textSize(SIZE * 0.3);
    ref = range(8);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (this.flipped) {
        text("hgfedcba"[i], SIZE * (i + 1), SIZE * 8.8);
        results.push(text("12345678"[i], SIZE * 0.25, SIZE * (i + 1)));
      } else {
        text("abcdefgh"[i], SIZE * (i + 1), SIZE * 8.8);
        results.push(text("87654321"[i], SIZE * 0.25, SIZE * (i + 1)));
      }
    }
    return results;
  }

  flip() {
    return this.flipped = !this.flipped;
  }

  move(uci) {}

};

Square = class Square {
  constructor(i1, col) {
    this.draw = this.draw.bind(this);
    this.i = i1;
    this.col = col;
    this.x = this.i % 8;
    this.y = 7 - Math.floor(this.i / 8);
    this.w = SIZE;
    this.h = SIZE;
    this.col = 'white';
  }

  draw(piece, flipped) {
    var x, y;
    if ((this.x + this.y) % 2 === 1) {
      fill('gray');
    } else {
      fill('lightgray');
    }
    [x, y] = flipped ? [7 - this.x, 7 - this.y] : [this.x, this.y];
    noStroke();
    rect(SIZE * (x + 1), SIZE * (y + 1), SIZE, SIZE);
    if (indexOf.call('rnbqkpRNBQKP', piece) >= 0) {
      return image(pics[piece], SIZE * (x + 0.5), SIZE * (y + 0.5), SIZE, SIZE);
    }
  }

};

Button = class Button {
  constructor(x1, y1, text1, onclick) {
    this.draw = this.draw.bind(this);
    this.inside = this.inside.bind(this);
    this.x = x1;
    this.y = y1;
    this.text = text1;
    this.onclick = onclick;
    this.w = 1.5 * SIZE;
    this.h = 0.7 * SIZE;
  }

  draw() {
    fill('white');
    rect(this.x, this.y, this.w, this.h);
    fill('black');
    textSize(SIZE / 2);
    return text(this.text, this.x, this.y + 0.05 * SIZE);
  }

  inside(x, y) {
    return (this.x - this.w / 2 < x && x < this.x + this.w / 2) && (this.y - this.h / 2 < y && y < this.y + this.h / 2);
  }

};

coords = (uci) => {
  var c0, c1, r0, r1;
  c0 = "abcdefgh".indexOf(uci[0]);
  r0 = "12345678".indexOf(uci[1]);
  c1 = "abcdefgh".indexOf(uci[2]);
  r1 = "12345678".indexOf(uci[3]);
  return [c0 + 8 * r0, c1 + 8 * r1];
};

window.preload = () => {
  var j, k, len, len1, letter, ref, ref1, results;
  data = loadJSON('../data/' + filename);
  ref = "rnbqkp";
  for (j = 0, len = ref.length; j < len; j++) {
    letter = ref[j];
    pics[letter] = loadImage('images/b' + letter + '.png');
  }
  ref1 = "RNBQKP";
  results = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    letter = ref1[k];
    results.push(pics[letter] = loadImage('images/w' + letter + '.png'));
  }
  return results;
};

window.setup = () => {
  var enPassant, enPassantTrue, from, i, j, k, len, len1, move, normalMove, pieces, promote, ref, res, san, score, superiors, superiorsSan, swap, to, uci;
  createCanvas(SIZE * 10.3, SIZE * 11);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  board = new Board();
  moves = data.plies; // [score,san,uci]
  res = [];
  for (j = 0, len = moves.length; j < len; j++) {
    move = moves[j];
    score = move[0];
    superiorsSan = move[1].split(" ");
    superiors = move[2].split(" ");
    san = superiorsSan[0];
    uci = superiors[0];
    board.move(uci);
    res.push({score, uci, san, superiors, superiorsSan});
  }
  moves = res;
  log(moves);
  piecess.push(board.pieces);
  swap = function(a, b, c, d) {
    return [pieces[a], pieces[b], pieces[c], pieces[d]] = [pieces[b], pieces[a], pieces[d], pieces[c]];
  };
  promote = function(from, to) {
    var newPiece;
    newPiece = move.uci[4];
    if (indexOf.call(range(48, 56), to) >= 0) {
      newPiece = newPiece.toUpperCase();
    }
    pieces[to] = newPiece;
    return pieces[from] = EMPTY;
  };
  enPassantTrue = function(from, to) { // Denna funktion skapades av CoPilot. NÃ¤stan korrekt.
    var ref, ref1, ref2;
    if ((ref = pieces[from], indexOf.call('pP', ref) >= 0) && pieces[to] === EMPTY) {
      if (pieces[from] === 'p' && pieces[to + 8] === 'P' && ((ref1 = from - to) === 7 || ref1 === 9)) {
        return true; // black takes white pawn
      }
      if (pieces[from] === 'P' && pieces[to - 8] === 'p' && ((ref2 = to - from) === 7 || ref2 === 9)) {
        return true; // white takes black pawn
      }
    }
    return false;
  };
  enPassant = function(from, to) {
    if (pieces[from] === 'p') {
      pieces[to + 8] = EMPTY;
    }
    if (pieces[from] === 'P') {
      pieces[to - 8] = EMPTY;
    }
    pieces[to] = pieces[from];
    return pieces[from] = EMPTY;
  };
  normalMove = function(from, to) {
    pieces[to] = pieces[from];
    return pieces[from] = EMPTY;
  };
  ref = range(moves.length);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    move = moves[i];
    pieces = _.clone(_.last(piecess));
    pieces = pieces.split("");
    [from, to] = coords(move.uci);
    if (move.uci === 'e1g1') {
      swap(4, 6, 5, 7); // castlings
    } else if (move.uci === 'e1c1') {
      swap(4, 2, 0, 3);
    } else if (move.uci === 'e8g8') {
      swap(60, 62, 61, 63);
    } else if (move.uci === 'e8c8') {
      swap(56, 59, 58, 60);
    } else if (move.uci.length === 5) {
      promote(from, to);
    } else if (enPassantTrue(from, to)) {
      enPassant(from, to);
    } else {
      normalMove(from, to);
    }
    pieces = pieces.join("");
    piecess.push(pieces);
  }
  return xdraw();
};

xdraw = () => {
  var button, j, len, results;
  background('gray');
  textSize(SIZE);
  board.draw();
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    results.push(button.draw());
  }
  return results;
};

setIndex = (value) => {
  var i, j, len, move, ref, results;
  log('setIndex', value, '/', moves.length - 1);
  if (value < -1 || value > moves.length - 1) {
    return;
  }
  if (value === -1) {
    return board.start();
  } else {
    index = value;
    board.pieces = piecess[index];
    if (index <= 0) {
      return;
    }
    buttons = buttons.slice(0, 6);
    move = moves[index - 1];
    ref = range(min(12, move.superiorsSan.length));
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(((i) => {
        var san, uci, x, y;
        x = 9.4 * SIZE;
        y = 0.8 * SIZE * (i + 1.1);
        san = move.superiorsSan[i];
        uci = move.superiors[i];
        return buttons.push(new Button(x, y, san, () => {
          return click(uci);
        }));
      })(i));
    }
    return results;
  }
};

// xdraw()
getMove = (index) => {
  if (index === -1) {
    return {
      score: '',
      uci: '',
      san: '',
      superiors: [],
      superiorsSan: []
    };
  } else {
    return moves[index];
  }
};

window.keyPressed = () => {
  if (key === 'ArrowRight') {
    click('next');
  }
  if (key === 'ArrowLeft') {
    click('prev');
  }
  if (key === ' ') {
    click('flip');
  }
  if (key === 'Home') {
    click('first');
  }
  if (key === 'End') {
    click('last');
  }
  return xdraw();
};

click = (key) => {
  if (key === 'flip') {
    return board.flip();
  } else if (key === 'first') {
    return setIndex(-1);
  } else if (key === 'last') {
    return setIndex(moves.length - 2);
  } else if (key === 'prev') {
    return setIndex(index - 1);
  } else if (key === 'next') {
    return setIndex(index + 1);
  } else if (key === 'link') {
    return window.open(data.link, '_blank');
  } else {
    return log(key);
  }
};

//setIndex index
//board.move key
showSan = (index) => {
  var dots;
  if (index < 0 || index >= moves.length - 1) {
    return '';
  }
  if (index % 2 === 0) {
    dots = '. ';
  } else {
    dots = '. ... ';
  }
  return div({}, Math.floor((index + 2) / 2) + dots + getMove(index).san);
};

window.mousePressed = () => {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      log("mousePressed");
      button.onclick();
      results.push(xdraw());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-018-Python-Chess_Evaluate\coffee\sketch.coffee