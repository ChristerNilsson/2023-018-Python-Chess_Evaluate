// Generated by CoffeeScript 2.5.1
var SIZE,
  indexOf = [].indexOf;

import {
  ass,
  lerp,
  param,
  range
} from '../js/utils.js';

import {
  Square
} from '../js/square.js';

import {
  Button
} from '../js/button.js';

import {
  makeMove,
  clickString,
  getMove,
  global,
  loadGame,
  fixSuper
} from '../js/globals.js';

SIZE = global.SIZE;

export var Board = (function() {
  var calcBar;

  class Board {
    constructor() {
      var i, j, len, ref, x0, x1, x2, x3;
      this.start = this.start.bind(this);
      this.move = this.move.bind(this);
      this.draw = this.draw.bind(this);
      this.littera = this.littera.bind(this);
      this.flip = this.flip.bind(this);
      this.squares = [];
      this.pieces = "";
      this.flipped = false;
      ref = range(64);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        this.squares.push(new Square(i));
      }
      this.start();
      this.buttons = [];
      x0 = 1.5;
      x1 = 3.5;
      x2 = 5.5;
      x3 = 7.5;
      this.buttons.push(new Button(x0 * SIZE, 9.5 * SIZE, 'first', () => {
        return clickString('first');
      }));
      this.buttons.push(new Button(x1 * SIZE, 9.5 * SIZE, 'move -1', () => {
        return clickString('prev');
      }));
      this.buttons.push(new Button(x2 * SIZE, 9.5 * SIZE, 'move +1', () => {
        return clickString('next');
      }));
      this.buttons.push(new Button(x3 * SIZE, 9.5 * SIZE, 'last', () => {
        return clickString('last');
      }));
      this.buttons.push(new Button(x0 * SIZE, 10.5 * SIZE, 'flip', () => {
        return clickString('flip');
      }));
      this.buttons.push(new Button(x1 * SIZE, 10.5 * SIZE, 'game -1', () => {
        return clickString('pgup');
      }));
      this.buttons.push(new Button(x2 * SIZE, 10.5 * SIZE, 'game +1', () => {
        return clickString('pgdn');
      }));
      this.buttons.push(new Button(x3 * SIZE, 10.5 * SIZE, 'link', () => {
        return clickString('link');
      }));
    }

    start() {
      return this.pieces = "RNBQKBNRPPPPPPPP33333333444444445555555566666666pppppppprnbqkbnr";
    }

    move(i) {
      var key, m;
      param.Integer(i);
      console.log('move', i);
      m = global.moves[global.index - 1];
      if (i === 0) {
        key = m.uci;
      } else {
        key = m.superiors[i - 1];
      }
      this.pieces = makeMove(key, global.piecess[global.index - 1]);
      global.superIndex = i + 1;
      return fixSuper(0);
    }

    draw() {
      var button, i, j, k, len, len1, ref, ref1, score;
      ref = this.buttons;
      for (j = 0, len = ref.length; j < len; j++) {
        button = ref[j];
        button.draw();
      }
      if (!global.data) {
        return;
      }
      fill('white');
      textSize(SIZE * 0.3);
      push();
      textAlign(LEFT, CENTER);
      text(global.filename, 0.05 * SIZE, 0.3 * SIZE);
      pop();
      ref1 = range(64);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        i = ref1[k];
        this.squares[i].draw(this.pieces[i], this.flipped);
      }
      stroke('black');
      noFill();
      rect(SIZE * 4.5, SIZE * 4.5, SIZE * 8, SIZE * 8);
      this.littera();
      push();
      textAlign(CENTER, CENTER);
      if (global.index > 0) {
        text('move: ' + (1 + Math.floor(global.index / 2)) + "BW"[global.index % 2] + " of " + (1 + Math.floor(global.moves.length / 2)), 4.5 * SIZE, 10 * SIZE);
      }
      if (global.index === 0) {
        score = '0';
      } else {
        if (global.superIndex === 0) {
          score = global.moves[global.index - 1].score;
        } else {
          score = global.moves[global.index - 1].scores[global.superIndex - 1];
        }
      }
      text('depth: ' + global.data.depth, 1.5 * SIZE, 10 * SIZE);
      text(global.version, 7.5 * SIZE, 10 * SIZE);
      textAlign(RIGHT, CENTER);
      fill('white');
      text(score, 10.1 * SIZE, 0.3 * SIZE);
      pop();
      return this.drawBars(score);
    }

    littera() {
      var digits, i, j, len, letters, ref, results;
      noStroke();
      fill('black');
      textSize(SIZE * 0.3);
      letters = this.flipped ? "hgfedcba" : "abcdefgh";
      digits = this.flipped ? "87654321" : "12345678";
      ref = range(8);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        text(letters[i], SIZE * (i + 1), SIZE * 8.8);
        results.push(text(digits[i], SIZE * 0.15, SIZE * (i + 1)));
      }
      return results;
    }

    flip() {
      return this.flipped = !this.flipped;
    }

    drawBars(score) {
      var h, w, x;
      param.String(score);
      stroke('black');
      h = calcBar(score);
      push();
      if (this.flipped) {
        translate(0, SIZE * 9);
        scale(1, -1);
      }
      rectMode(CORNER);
      noStroke();
      x = 0.35 * SIZE;
      w = 0.10 * SIZE;
      fill('black');
      rect(x, 0.5 * SIZE, w, SIZE * 4);
      fill('white');
      rect(x, 4.5 * SIZE, w, SIZE * 4);
      if (h > 0) {
        fill('white');
        rect(x, 4.5 * SIZE - h, w, h);
      } else {
        fill('black');
        rect(x, 4.5 * SIZE, w, -h);
      }
      return pop();
    }

  };

  calcBar = (score) => {
    var LIMIT, d, res;
    param.String(score);
    LIMIT = 2000;
    if (score[0] === '#') {
      d = LIMIT;
    } else {
      d = Math.abs(score);
    }
    if (d > LIMIT) {
      d = LIMIT;
    }
    res = lerp(0, 4 * SIZE, d / LIMIT);
    if (indexOf.call(score, "-") >= 0) {
      res = -res;
    }
    return param.Integer(Math.round(res));
  };

  ass(4 * SIZE, calcBar("2100"));

  ass(4 * SIZE, calcBar("2000"));

  ass(2 * SIZE, calcBar("1000"));

  ass(SIZE, calcBar("500"));

  ass(0, calcBar("1"));

  ass(-SIZE, calcBar("-500"));

  ass(-4 * SIZE, calcBar("#-1"));

  return Board;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-018-Python-Chess_Evaluate\coffee\board.coffee