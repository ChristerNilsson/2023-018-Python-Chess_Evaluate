// Generated by CoffeeScript 2.5.1
var SIZE;

import {
  ass,
  lerp,
  range
} from '../js/utils.js';

import {
  Square
} from '../js/square.js';

import {
  Button
} from '../js/button.js';

import {
  makeMove,
  click,
  getMove,
  global
} from '../js/globals.js';

SIZE = global.SIZE;

export var Board = (function() {
  var calcBar;

  class Board {
    constructor() {
      var i, j, len, ref;
      this.start = this.start.bind(this);
      this.move = this.move.bind(this);
      this.draw = this.draw.bind(this);
      this.littera = this.littera.bind(this);
      this.flip = this.flip.bind(this);
      this.squares = [];
      this.pieces = "";
      this.flipped = false;
      ref = range(64);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        this.squares.push(new Square(i));
      }
      this.start();
      this.buttons = [];
      this.buttons.push(new Button(1.0 * SIZE, 9.5 * SIZE, 'first', () => {
        return click('first');
      }));
      this.buttons.push(new Button(2.7 * SIZE, 9.5 * SIZE, 'prev', () => {
        return click('prev');
      }));
      this.buttons.push(new Button(4.4 * SIZE, 9.5 * SIZE, 'next', () => {
        return click('next');
      }));
      this.buttons.push(new Button(6.1 * SIZE, 9.5 * SIZE, 'last', () => {
        return click('last');
      }));
      this.buttons.push(new Button(1.0 * SIZE, 10.5 * SIZE, 'flip', () => {
        return click('flip');
      }));
      this.buttons.push(new Button(2.7 * SIZE, 10.5 * SIZE, 'link', () => {
        return click('link');
      }));
    }

    start() {
      return this.pieces = "RNBQKBNRPPPPPPPP33333333444444445555555566666666pppppppprnbqkbnr";
    }

    move(i) {
      var key, m;
      m = global.moves[global.index - 1];
      if (i === 0) {
        key = m.uci;
      } else {
        key = m.superiors[i - 1];
      }
      this.pieces = makeMove(key, global.piecess[global.index - 1]);
      return global.superIndex = i;
    }

    draw() {
      var button, i, j, k, len, len1, ref, ref1, results, score;
      fill('white');
      textSize(SIZE * 0.3);
      push();
      textAlign(LEFT, CENTER);
      text(global.filename, 0.05 * SIZE, 0.3 * SIZE);
      pop();
      ref = range(64);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        this.squares[i].draw(this.pieces[i], this.flipped);
      }
      stroke('black');
      noFill();
      rect(SIZE * 4.5, SIZE * 4.5, SIZE * 8, SIZE * 8);
      this.littera();
      text(global.index + " of " + global.moves.length, 5 * SIZE, 10.5 * SIZE);
      if (global.index === 0) {
        score = 0;
      } else {
        if (global.superIndex === 0) {
          score = global.moves[global.index - 1].score;
        } else {
          score = global.moves[global.index - 1].scores[global.superIndex - 1];
        }
      }
      text('score:' + score, 7 * SIZE, 10.5 * SIZE);
      text(global.data.depth, 10 * SIZE, 0.3 * SIZE);
      this.drawBars(score);
      ref1 = this.buttons;
      // txt0=""
      // txt1=""
      // if global.superIndex == 0 then txt0 = "actual move"
      // #if global.superIndex == getMove(global.index-1).superiorsSan.length then txt1 = "strongest"
      // if txt0!="" and txt1!="" then txt = txt0 + " == " + txt1
      // else txt = txt0 + txt1
      // text txt, 8*SIZE, 10.5*SIZE
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        button = ref1[k];
        results.push(button.draw());
      }
      return results;
    }

    littera() {
      var i, j, len, ref, results;
      noStroke();
      fill('black');
      textSize(SIZE * 0.3);
      ref = range(8);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (this.flipped) {
          text("hgfedcba"[i], SIZE * (i + 1), SIZE * 8.8);
          results.push(text("12345678"[i], SIZE * 0.1, SIZE * (i + 1)));
        } else {
          text("abcdefgh"[i], SIZE * (i + 1), SIZE * 8.8);
          results.push(text("87654321"[i], SIZE * 0.1, SIZE * (i + 1)));
        }
      }
      return results;
    }

    flip() {
      return this.flipped = !this.flipped;
    }

    drawBars(score) {
      var h;
      stroke('black');
      h = calcBar(score);
      push();
      rectMode(CORNER);
      noStroke();
      fill('black');
      rect(0.25 * SIZE, 0.5 * SIZE, SIZE * 0.2, SIZE * 4);
      fill('white');
      rect(0.25 * SIZE, 4.5 * SIZE, SIZE * 0.2, SIZE * 4);
      if (h > 0) {
        fill('white');
        rect(0.25 * SIZE, 4.5 * SIZE - h, SIZE * 0.2, h);
      } else {
        fill('black');
        rect(0.25 * SIZE, 4.5 * SIZE, SIZE * 0.2, -h);
      }
      return pop();
    }

  };

  calcBar = (score) => {
    var LIMIT, d, res;
    LIMIT = 2000;
    d = Math.abs(score);
    if (d > LIMIT) {
      d = LIMIT;
    }
    res = lerp(0 * SIZE, 4 * SIZE, d / LIMIT);
    if (score < 0) {
      res = -res;
    }
    return Math.round(res);
  };

  ass(200, calcBar(2100));

  ass(200, calcBar(2000));

  ass(100, calcBar(1000));

  ass(50, calcBar(500));

  ass(0, calcBar(1));

  ass(-50, calcBar(-500));

  return Board;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-018-Python-Chess_Evaluate\coffee\board.coffee