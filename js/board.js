// Generated by CoffeeScript 2.5.1
var SIZE,
  indexOf = [].indexOf;

import {
  ass,
  lerp,
  range
} from '../js/utils.js';

import {
  Square
} from '../js/square.js';

import {
  Button
} from '../js/button.js';

import {
  makeMove,
  click,
  getMove,
  global
} from '../js/globals.js';

SIZE = global.SIZE;

export var Board = (function() {
  var calcBar;

  class Board {
    constructor() {
      var i, j, len, ref;
      this.start = this.start.bind(this);
      this.move = this.move.bind(this);
      this.draw = this.draw.bind(this);
      this.littera = this.littera.bind(this);
      this.flip = this.flip.bind(this);
      this.squares = [];
      this.pieces = "";
      this.flipped = false;
      ref = range(64);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        this.squares.push(new Square(i));
      }
      this.start();
      this.buttons = [];
      this.buttons.push(new Button(1.0 * SIZE, 9.5 * SIZE, 'first', () => {
        return click('first');
      }));
      this.buttons.push(new Button(2.7 * SIZE, 9.5 * SIZE, 'prev', () => {
        return click('prev');
      }));
      this.buttons.push(new Button(4.4 * SIZE, 9.5 * SIZE, 'next', () => {
        return click('next');
      }));
      this.buttons.push(new Button(6.1 * SIZE, 9.5 * SIZE, 'last', () => {
        return click('last');
      }));
      this.buttons.push(new Button(1.0 * SIZE, 10.5 * SIZE, 'flip', () => {
        return click('flip');
      }));
      this.buttons.push(new Button(2.7 * SIZE, 10.5 * SIZE, 'link', () => {
        return click('link');
      }));
    }

    start() {
      return this.pieces = "RNBQKBNRPPPPPPPP33333333444444445555555566666666pppppppprnbqkbnr";
    }

    move(i) {
      var key, m;
      m = global.moves[global.index - 1];
      if (i === 0) {
        key = m.uci;
      } else {
        key = m.superiors[i - 1];
      }
      this.pieces = makeMove(key, global.piecess[global.index - 1]);
      return global.superIndex = i;
    }

    draw() {
      var button, i, j, k, len, len1, ref, ref1, results, score;
      fill('white');
      textSize(SIZE * 0.3);
      push();
      textAlign(LEFT, CENTER);
      text(global.filename, 0.05 * SIZE, 0.3 * SIZE);
      pop();
      ref = range(64);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        this.squares[i].draw(this.pieces[i], this.flipped);
      }
      stroke('black');
      noFill();
      rect(SIZE * 4.5, SIZE * 4.5, SIZE * 8, SIZE * 8);
      this.littera();
      push();
      textAlign(LEFT, CENTER);
      text('move: ' + global.index / 2 + " of " + global.moves.length / 2, 4 * SIZE, 10.5 * SIZE);
      if (global.index === 0) {
        score = 0;
      } else {
        if (global.superIndex === 0) {
          score = global.moves[global.index - 1].score;
        } else {
          score = global.moves[global.index - 1].scores[global.superIndex - 1];
        }
      }
      text('score: ' + score, 7 * SIZE, 9.5 * SIZE);
      text('ver: 2023-04-05 11:23', 7 * SIZE, 10.0 * SIZE);
      text('depth: ' + global.data.depth, 7 * SIZE, 10.5 * SIZE);
      pop();
      this.drawBars(score);
      ref1 = this.buttons;
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        button = ref1[k];
        results.push(button.draw());
      }
      return results;
    }

    littera() {
      var i, j, len, ref, results;
      noStroke();
      fill('black');
      textSize(SIZE * 0.3);
      ref = range(8);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (this.flipped) {
          text("hgfedcba"[i], SIZE * (i + 1), SIZE * 8.8);
          results.push(text("12345678"[i], SIZE * 0.1, SIZE * (i + 1)));
        } else {
          text("abcdefgh"[i], SIZE * (i + 1), SIZE * 8.8);
          results.push(text("87654321"[i], SIZE * 0.1, SIZE * (i + 1)));
        }
      }
      return results;
    }

    flip() {
      return this.flipped = !this.flipped;
    }

    drawBars(score) {
      var h;
      stroke('black');
      h = calcBar(score);
      push();
      rectMode(CORNER);
      noStroke();
      fill('black');
      rect(0.25 * SIZE, 0.5 * SIZE, SIZE * 0.2, SIZE * 4);
      fill('white');
      rect(0.25 * SIZE, 4.5 * SIZE, SIZE * 0.2, SIZE * 4);
      if (h > 0) {
        fill('white');
        rect(0.25 * SIZE, 4.5 * SIZE - h, SIZE * 0.2, h);
      } else {
        fill('black');
        rect(0.25 * SIZE, 4.5 * SIZE, SIZE * 0.2, -h);
      }
      return pop();
    }

  };

  calcBar = (score) => {
    var LIMIT, d, res;
    LIMIT = 2000;
    if (score[0] === '#') {
      d = LIMIT;
    } else {
      d = Math.abs(score);
    }
    if (d > LIMIT) {
      d = LIMIT;
    }
    res = lerp(0, 4 * SIZE, d / LIMIT);
    if (indexOf.call(score, "-") >= 0) {
      res = -res;
    }
    return Math.round(res);
  };

  ass(4 * SIZE, calcBar("2100"));

  ass(4 * SIZE, calcBar("2000"));

  ass(2 * SIZE, calcBar("1000"));

  ass(SIZE, calcBar("500"));

  ass(0, calcBar("1"));

  ass(-SIZE, calcBar("-500"));

  ass(-4 * SIZE, calcBar("#-1"));

  return Board;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-018-Python-Chess_Evaluate\coffee\board.coffee